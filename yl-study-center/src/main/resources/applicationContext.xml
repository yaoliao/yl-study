<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 引入属性文件 -->
    <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db-pool.properties</value>
                <value>classpath:jdbc.properties</value>
                <value>classpath:dubbo-runtime.properties</value>
                <value>classpath:redis.properties</value>
                <value>classpath:solr.properties</value>
                <value>classpath:event.properties</value>
            </list>
        </property>
    </bean>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.yl"/>

    <import resource="classpath:applicationContext-db.xml"/>
    <import resource="classpath:applicationContext-dubbo.xml"/>
    <import resource="classpath:applicationContext-redis.xml"/>
    <import resource="classpath:applicationContext-solr.xml"/>
    <import resource="classpath:applicationContext-event.xml"/>
    <!--<import resource="classpath:applicationContext-workflow.xml"/>-->

    <!--开启事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <aop:aspectj-autoproxy/>


    <bean id="methodInterceptor" class="com.yl.study.aop.MyAnnotationAop"/>

    <!-- 方法拦截器（拦截domain包中的所有被ToJson注解的方法） MethodInterceptor -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="controllerMethodPointcut" expression="execution(public * com.yl.study..*.*(..)) and
        @annotation(com.yl.study.annotation.ToJson)"/>
        <aop:advisor advice-ref="methodInterceptor" pointcut-ref="controllerMethodPointcut"/>
    </aop:config>


</beans>